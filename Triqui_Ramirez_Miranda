#include <Elegoo_GFX.h>
#include <Elegoo_TFTLCD.h>
#include <TouchScreen.h>
#if defined(__SAM3X8E__)
#undef __FlashStringHelper::F(string_literal)
#define F(string_literal) string_literal
#endif
#define YP A3  
#define XM A2  
#define YM 9   
#define XP 8   
#define TS_MINX 120
#define TS_MAXX 900
#define TS_MINY 70
#define TS_MAXY 920
#define LCD_CS A3
#define LCD_CD A2
#define LCD_WR A1
#define LCD_RD A0
#define LCD_RESET A4
#define BLACK   0x0000
#define BLUE    0x001F
#define RED     0xF800
#define GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF
#define BOXSIZE 40
#define PENRADIUS 3
#define RESTART asm("jmp 0x0000")
Elegoo_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);
TouchScreen ts = TouchScreen(XP, YP, XM, YM, 300);
int oldcolor, currentcolor;

//Hasta esta parte, lo unico que se hizo fue definir pines, incluir librerias y definir colores.


void setup(void) {
  Serial.begin(9600);
  Serial.println(F("Paint!"));
  tft.reset();
  uint16_t identifier = tft.readID();
  if (identifier == 0x9325) {
    Serial.println(F("Found ILI9325 LCD driver"));
  } else if (identifier == 0x9328) {
    Serial.println(F("Found ILI9328 LCD driver"));
  } else if (identifier == 0x4535) {
    Serial.println(F("Found LGDP4535 LCD driver"));
  } else if (identifier == 0x7575) {
    Serial.println(F("Found HX8347G LCD driver"));
  } else if (identifier == 0x9341) {
    Serial.println(F("Found ILI9341 LCD driver"));
  } else if (identifier == 0x8357) {
    Serial.println(F("Found HX8357D LCD driver"));
  } else if (identifier == 0x0101)
  {
    identifier = 0x9341;
    Serial.println(F("Found 0x9341 LCD driver"));
  } else {
    Serial.print(F("Unknown LCD driver chip: "));
    Serial.println(identifier, HEX);
    Serial.println(F("If using the Elegoo 2.8\" TFT Arduino shield, the line:"));
    Serial.println(F("  #define USE_Elegoo_SHIELD_PINOUT"));
    Serial.println(F("should appear in the library header (Elegoo_TFT.h)."));
    Serial.println(F("If using the breakout board, it should NOT be #defined!"));
    Serial.println(F("Also if using the breakout, double-check that all wiring"));
    Serial.println(F("matches the tutorial."));
    identifier = 0x9341;
  }


//La anterior seccion sirve para reconocer en inicializar la pantalla.


  
  tft.begin(identifier);
  tft.setRotation(2);
  tft.fillScreen(BLACK);
  tft.fillRect(BOXSIZE * 2, 0, BOXSIZE, BOXSIZE, RED);
  tft.fillRect(BOXSIZE * 3, 0, BOXSIZE, BOXSIZE, BLUE);
  currentcolor = RED;
  tft.drawRect(10,50, 220, 220, WHITE);
  tft.fillRect(75, 50, 2, 220, WHITE);
  tft.fillRect(150, 50, 2, 220, WHITE);
  tft.fillRect(10, 120, 220, 2, WHITE);
  tft.fillRect(10, 200, 220, 2, WHITE);

  tft.fillRect(10, 280, 220, 40, RED);
  tft.drawRect(10, 280, 220, 40, WHITE);
  tft.setCursor(55,290);
  tft.setTextColor(WHITE);
  tft.setTextSize(1);
  tft.print("Presione alguna esquina");
  tft.setCursor(55,300);
  tft.setTextColor(WHITE);
  tft.print("superior para resetear.");
  pinMode(13, OUTPUT);
}


//En la anterior se crearon los cuadros de color, la cuadricula del juego y el anuncio para resetear el juego.



#define MINPRESSURE 10
#define MAXPRESSURE 500

//Las anteriores dos lineas definen la presion minima y maxima de operacion de la pantalla.
void loop()
{
  digitalWrite(13, HIGH);
  TSPoint p = ts.getPoint();
  digitalWrite(13, LOW);
  pinMode(XM, OUTPUT);
  pinMode(YP, OUTPUT);
  
  if (p.z > MINPRESSURE && p.z < MAXPRESSURE) {
      p.x = map(p.x, TS_MINX, TS_MAXX, tft.width(), 0);
      p.y = (tft.height() - map(p.y, TS_MINY, TS_MAXY, tft.height(), 0)); // Condicionales que definen el modo de operacion basico, es decir, dibujar.
      
    if (p.y < BOXSIZE) {
        oldcolor = currentcolor;
        
      if (p.x < BOXSIZE) {
        tft.fillRect(0, BOXSIZE, tft.width(), tft.height()-BOXSIZE, BLACK);     //Boton que sirve para limpiar lo pintado en la pantalla.
        tft.drawRect(10,50, 220, 220, WHITE);
        tft.fillRect(75, 50, 2, 220, WHITE);
        tft.fillRect(150, 50, 2, 220, WHITE);
        tft.fillRect(10, 120, 220, 2, WHITE);
        tft.fillRect(10, 200, 220, 2, WHITE); 
        tft.fillRect(10, 280, 220, 40, RED);
        tft.drawRect(10, 280, 220, 40, WHITE);
        tft.setCursor(55,290);
        tft.setTextColor(WHITE);
        tft.setTextSize(1);
        tft.print("Presione alguna esquina");
        tft.setCursor(55,300);
        tft.setTextColor(WHITE);
        tft.print("superior para resetear.");
        pinMode(13, OUTPUT);
}
  
      else if (p.x < BOXSIZE * 2) {} // No se puede escribir en esta seccion de la pantalla.
      
      else if (p.x < BOXSIZE * 3) {
        currentcolor = RED;
        tft.drawRect(BOXSIZE * 2, 0, BOXSIZE, BOXSIZE, WHITE);    //Actualiza el color seleccionado y resalta el cuadro del color seleccionado.
      }

      else if (p.x < BOXSIZE * 4) {
        currentcolor = BLUE;
        tft.drawRect(BOXSIZE * 3, 0, BOXSIZE, BOXSIZE, WHITE);  //Actualiza el color seleccionado y resalta el cuadro del color seleccionado.
      }
      
      else if (p.x < BOXSIZE * 5) {} // No se puede escribir en esta seccion de la pantalla.
      
      else if (p.x < BOXSIZE * 6) {
  tft.fillRect(0, BOXSIZE, tft.width(), tft.height()-BOXSIZE, BLACK);
  tft.drawRect(10,50, 220, 220, WHITE);
  tft.fillRect(75, 50, 2, 220, WHITE);
  tft.fillRect(150, 50, 2, 220, WHITE);
  tft.fillRect(10, 120, 220, 2, WHITE);                                   //Boton que sirve para limpiar lo pintado en la pantalla.
  tft.fillRect(10, 200, 220, 2, WHITE);
  tft.fillRect(10, 280, 220, 40, RED);
  tft.drawRect(10, 280, 220, 40, WHITE);
  tft.setCursor(55,290);
  tft.setTextColor(WHITE);
  tft.setTextSize(1);
  tft.print("Presione alguna esquina");
  tft.setCursor(55,300);
  tft.setTextColor(WHITE);
  tft.print("superior para resetear.");
  pinMode(13, OUTPUT);
}
      if (oldcolor != currentcolor) {
      if (oldcolor == RED) tft.fillRect(BOXSIZE * 2, 0, BOXSIZE, BOXSIZE, RED);
      if (oldcolor == BLUE) tft.fillRect(BOXSIZE * 3, 0, BOXSIZE, BOXSIZE, BLUE);      //Condiciones para mantener alguno de los dos colores.
      }
    }
    if (((p.y - PENRADIUS) > BOXSIZE) && ((p.y + PENRADIUS) < tft.height())) {
      tft.fillCircle(p.x, p.y, PENRADIUS, currentcolor);
    }
  }
}
